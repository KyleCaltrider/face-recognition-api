{"version":3,"sources":["New_User.js","Upload.js","Description.js","App.js","serviceWorker.js","index.js"],"names":["NewUser","props","react_default","a","createElement","id","className","type","name","value","user","onChange","userChange","required","onClick","click","Upload","accept","multiple","upload","e","compare","target","files","Description","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","photoURL","undefined","handleVideo","bind","assertThisInitialized","handleTakePhoto","checkIdentity","registerUser","handleUserChange","handleDeleteAllUsers","handleBulkUpload","preventDefault","console","log","form","FormData","key","append","req","XMLHttpRequest","open","onload","alert","responseText","send","setState","navigator","mediaDevices","getUserMedia","video","then","stream","vid","document","getElementById","window","srcObject","tracks","getVideoTracks","trackCapabilities","getCapabilities","catch","err","callback","track","ImageCapture","takePhoto","blob","img","_this2","d","JSON","parse","response","URL","revokeObjectURL","createObjectURL","length","new_users","map","showRegistration","_this3","src","New_User","src_Upload","autoPlay","playsInline","src_Description","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","registration","unregister"],"mappings":"gOAceA,SAZC,SAASC,GACrB,OACIC,EAAAC,EAAAC,cAAA,QAAMC,GAAG,eAAeC,UAAU,eAC9BJ,EAAAC,EAAAC,cAAA,yBAEIF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,KAAK,OAAOC,MAAOR,EAAMS,KAAMC,SAAUV,EAAMW,WAAYC,UAAQ,KAE1FX,EAAAC,EAAAC,cAAA,UAAQU,QAASb,EAAMc,OAAvB,aCOGC,EAdA,SAASf,GACpB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OAAOC,UAAU,IACrBJ,EAAAC,EAAAC,cAAA,6BACIF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,KAAK,OAAOS,OAAO,UAAUC,UAAQ,EAACP,SAAUV,EAAMkB,UAE7EjB,EAAAC,EAAAC,cAAA,wBACIF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,KAAK,QAAQS,OAAO,UAAUN,SAAU,SAACS,GAAD,OAAOnB,EAAMoB,QAAQD,EAAEE,OAAOC,MAAM,UCsBhGC,EAnBK,SAACvB,GACjB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eACRH,EAAAC,EAAAC,cAAA,KAAGC,GAAG,WAAN,8CACAH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,6EACAF,EAAAC,EAAAC,cAAA,2DAEFF,EAAAC,EAAAC,cAAA,KAAGC,GAAG,aAAaC,UAAU,cAvBhB,yiBAwBbJ,EAAAC,EAAAC,cAAA,KAAGC,GAAG,aAAaC,UAAU,cAlBjB,+VCyKLmB,cA1Kb,SAAAA,EAAYxB,GAAO,IAAAyB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM5B,KAEDgC,MAAQ,CACXC,SAAU,GACVxB,UAAMyB,GAGRT,EAAKU,YAAcV,EAAKU,YAAYC,KAAjBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACnBA,EAAKa,gBAAkBb,EAAKa,gBAAgBF,KAArBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACvBA,EAAKc,cAAgBd,EAAKc,cAAcH,KAAnBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACrBA,EAAKe,aAAef,EAAKe,aAAaJ,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACpBA,EAAKgB,iBAAmBhB,EAAKgB,iBAAiBL,KAAtBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACxBA,EAAKiB,qBAAuBjB,EAAKiB,qBAAqBN,KAA1BV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAC5BA,EAAKkB,iBAAmBlB,EAAKkB,iBAAiBP,KAAtBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAdPA,mFAkBjBG,KAAKO,uDAGUhB,GACfA,EAAEyB,iBACFC,QAAQC,IAAI,qBACZ,IAAMvC,EAAOY,EAAEE,OAAOd,KAChBe,EAAQH,EAAEE,OAAOC,MACvBuB,QAAQC,IAAI,QAASvC,EAAM,SAAUe,GACrC,IAAMyB,EAAO,IAAIC,SACjB,IAAK,IAAIC,KAAO3B,EAAOyB,EAAKG,OAAO3C,EAAMe,EAAM2B,IAC/C,IAIIE,EAAM,IAAIC,eACdD,EAAIE,KAAK,OAAQ,aACjBF,EAAIG,OANY,WACdC,MAAMJ,EAAIK,cACVX,QAAQC,IAAI,YAAaK,EAAIK,eAK/BL,EAAIM,KAAKV,4CAGM5B,GACfS,KAAK8B,SAAS,CAACjD,KAAMU,EAAEE,OAAOb,8CAI9BqC,QAAQC,IAAI,2CAcZa,UAAUC,aACCC,aAAa,CAACC,OAAO,IACrBC,KAfK,SAAAC,GACd,IAAMC,EAAMC,SAASC,eAAe,kBACpCC,OAAOJ,OAASA,EAChBC,EAAII,UAAYL,EAChB,IAAIM,EAASN,EAAOO,iBACpB1B,QAAQC,IAAI,YAAawB,EAAO,IAChC,IAAIE,EAAoBF,EAAO,GAAGG,kBAClC5B,QAAQC,IAAI,iBAAkB0B,KASrBE,MAPG,SAAAC,GACZpB,MAAM,oBACNV,QAAQC,IAAI,uBAAwB6B,6CAQxBC,GACd/B,QAAQC,IAAI,kCAcZa,UAAUC,aACCC,aAAa,CAACC,OAAO,IACrBC,KAfK,SAAAC,GACd,IAAMa,EAAQb,EAAOO,iBAAiB,GACnB,IAAIO,aAAaD,GACzBE,YACAhB,KAAK,SAAAiB,GACJJ,EAASI,OAWZN,MARG,SAAAC,GACZpB,MAAM,qBACNV,QAAQC,IAAI,sBAAuB6B,2CASzBM,GAAK,IAAAC,EAAAtD,KACjBiB,QAAQC,IAAI,qBACZ,IAeIC,EAAO,IAAIC,SACfD,EAAKG,OAAO,QAAS+B,EAAK,mBAE1B,IAAI9B,EAAM,IAAIC,eACdD,EAAIE,KAAK,OAAQ,aACjBF,EAAIG,OApBY,WACd,IAAM6B,EAAIC,KAAKC,MAAMlC,EAAImC,UAGzB,GAFIJ,EAAKlD,MAAMC,UAAUsD,IAAIC,gBAAgBN,EAAKlD,MAAMC,UACxDiD,EAAKxB,SAAS,CAACzB,SAAUsD,IAAIE,gBAAgBR,KACzCE,EAAEO,OAAQ,CACZ,IAAMC,EAAYR,EAAES,IAAI,SAAAnF,GAAI,OAAIA,EAAKA,OACrCoC,QAAQC,IAAI,YAAaqC,GACzBtC,QAAQC,IAAI,aAAc6C,GAC1BT,EAAKxB,SAAS,CAACjD,KAAMkF,EAAWE,kBAAkB,SAGlDX,EAAKxB,SAAS,CAACjD,KAAM,oBACrBoC,QAAQC,IAAI,WAAYqC,IAS5BhC,EAAIM,KAAKV,wCAGEkC,GACXpC,QAAQC,IAAI,qBACZ,IAKIC,EAAO,IAAIC,SACfD,EAAKG,OAAO,OAAQtB,KAAKI,MAAMvB,MAC/BsC,EAAKG,OAAO,QAAS+B,EAAK,mBAE1B,IAAI9B,EAAM,IAAIC,eACdD,EAAIE,KAAK,OAAQ,aACjBF,EAAIG,OAXY,WACdT,QAAQC,IAAI,YAAaK,EAAIK,cAC7BD,MAAMJ,EAAIK,eAUZL,EAAIM,KAAKV,kDAIT,IAKII,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAO,WAChBF,EAAIG,OAPY,WACdT,QAAQC,IAAI,YAAaK,EAAIK,cAC7BD,MAAMJ,EAAIK,eAMZL,EAAIM,wCAGG,IAAAqC,EAAAlE,KAGP,OACE3B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,mBACNH,EAAAC,EAAAC,cAAA,MAAIC,GAAG,SAAP,uBAAmCH,EAAAC,EAAAC,cAAA,WAAMyB,KAAKI,MAAMvB,MACpDR,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQ2F,IAAKnE,KAAKI,MAAMC,UANvB,8DAQXhC,EAAAC,EAAAC,cAAC6F,EAAD,CAASvF,KAAMmB,KAAKI,MAAMvB,KACjBE,WAAYiB,KAAKa,iBACjB3B,MAAO,SAACK,GACPA,EAAEyB,iBACFkD,EAAKxD,gBAAgBwD,EAAKtD,iBAGpCvC,EAAAC,EAAAC,cAAC8F,EAAD,CAAQ/E,OAAQU,KAAKe,iBAAkBvB,QAASQ,KAAKW,gBACrDtC,EAAAC,EAAAC,cAAA,UAAQE,UAAU,SAASQ,QAAS,kBAAMiF,EAAKxD,gBAAgBwD,EAAKvD,iBAAgBtC,EAAAC,EAAAC,cAAA,KAAGE,UAAU,mBACjGJ,EAAAC,EAAAC,cAAA,SAAOC,GAAG,iBAAiB8F,UAAQ,EAACC,aAAW,GAA/C,+CAGAlG,EAAAC,EAAAC,cAAA,MAAIC,GAAG,QAAQC,UAAU,SAAzB,+BACAJ,EAAAC,EAAAC,cAAA,MAAIC,GAAG,WAAWC,UAAU,SAA5B,+BACAJ,EAAAC,EAAAC,cAACiG,EAAD,MACAnG,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYS,QAASe,KAAKc,sBAAsBzC,EAAAC,EAAAC,cAAA,6DArKjDkG,aCMEC,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1G,EAAAC,EAAAC,cAACyG,EAAD,MAAS1C,SAASC,eAAe,SD2H3C,kBAAmBR,WACrBA,UAAUkD,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.5b2ae259.chunk.js","sourcesContent":["import React from 'react';\n\nconst NewUser = function(props) {\n    return (\n        <form id=\"registration\" className=\"options-bar\">\n            <label>\n                New User:\n                <input type='text' name='user' value={props.user} onChange={props.userChange} required/>\n            </label>\n            <button onClick={props.click}>Submit</button>\n        </form>\n    )\n}\n\nexport default NewUser;","import React from 'react';\n\nconst Upload = function(props) {\n    return(\n        <div id=\"bulk\" className=\"\">\n            <label>Upload Users:\n                <input type=\"file\" name=\"bulk\" accept=\"image/*\" multiple onChange={props.upload} />\n            </label>\n            <label>Compare:\n                <input type=\"file\" name=\"image\" accept=\"image/*\" onChange={(e) => props.compare(e.target.files[0])} />\n            </label>\n        </div>\n    )\n}\n\n\nexport default Upload","import React from 'react';\n\nconst APP_DESCRIPTION = `This app needs media device access (camera) and JavaScript enabled to run.\nPress the Photo Button to snap a pic and compare it to known users. Add a new known face by either filling in New User > Submit (snaps a new pic), or by using the Upload Users option.\nTo upload a new user(s) image, name the photo(s) after the user in the picture (1 user per photo on this step, ex: \"Pickle Rick.jpg\").\nUse the Compare upload option to search an uploaded image for known users.\nIf the app knows who's in the photo it will display their user names above.`\n\nconst APP_DISCLAIMER = `** This app needs to set a cookie to keep an open user collection of facial recognition data.\nOnly the active browser with unique cookie has access to the users in the collection. The button bellow can be used to erase the current session\ncollection from the database. As a precaution, all collections in the demo database are removed nightly.`\n\nconst Description = (props) => {\n    return (\n        <div id=\"description\">\n        <p id=\"welcome\">Welcome to my facial recognition demo app.</p>\n        <ul>\n          <strong>Highlights:</strong>\n          <li>Python Backend built on Flask</li>\n          <li>MongoDB Storage</li>\n          <li>ReactJS Frontend</li>\n          <li>Identifies users in a photo</li>\n          <li>Image upload options for adding known users and comparing users</li>\n          <li>Expandable but session based user collection</li>\n        </ul>\n        <p id=\"usage-info\" className=\"text-small\">{APP_DESCRIPTION}</p>\n        <p id=\"disclaimer\" className=\"text-small\">{APP_DISCLAIMER}</p>\n      </div>\n    )\n}\n\nexport default Description","import React, { Component } from 'react';\nimport './App.css';\nimport NewUser from './New_User.js';\nimport Upload from './Upload.js';\nimport Description from './Description.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // State\n    this.state = {\n      photoURL: '',\n      user: undefined\n    }\n    // Bind Class Methods Here\n    this.handleVideo = this.handleVideo.bind(this);\n    this.handleTakePhoto = this.handleTakePhoto.bind(this);\n    this.checkIdentity = this.checkIdentity.bind(this);\n    this.registerUser = this.registerUser.bind(this);\n    this.handleUserChange = this.handleUserChange.bind(this);\n    this.handleDeleteAllUsers = this.handleDeleteAllUsers.bind(this);\n    this.handleBulkUpload = this.handleBulkUpload.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleVideo();\n  }\n\n  handleBulkUpload(e) {\n    e.preventDefault();\n    console.log(\"POST to /register\")\n    const name = e.target.name, \n          files = e.target.files\n    console.log(\"Name:\", name, \"Files:\", files)\n    const form = new FormData();\n    for (let key in files) form.append(name, files[key])\n    const success = () => {\n      alert(req.responseText)\n      console.log(\"Response:\", req.responseText)\n    }\n    let req = new XMLHttpRequest();\n    req.open('POST', \"/register\");\n    req.onload = success;\n    req.send(form);\n  }\n\n  handleUserChange(e) {\n    this.setState({user: e.target.value})\n  }\n\n  handleVideo() {\n    console.log(\"Starting Video Stream From Media Device\")\n    const success = stream => {\n      const vid = document.getElementById('camera-display');\n      window.stream = stream;\n      vid.srcObject = stream;\n      let tracks = stream.getVideoTracks();\n      console.log('Track 0: ', tracks[0]);\n      let trackCapabilities = tracks[0].getCapabilities();\n      console.log('Capabilities: ', trackCapabilities);\n    }\n    const error = err => {\n      alert(\"Can't Get Video!\");\n      console.log('getUserMedia Error: ', err);\n    }\n    navigator.mediaDevices\n              .getUserMedia({video: true})\n              .then(success)\n              .catch(error);\n  }\n\n  handleTakePhoto(callback) {\n    console.log(\"Taking Photo From Media Device\")\n    const success = stream => {\n      const track = stream.getVideoTracks()[0];\n      const imgCapture = new ImageCapture(track);\n      imgCapture.takePhoto()\n                .then(blob => {\n                  callback(blob);\n                })\n    }\n    const error = err => {\n      alert(\"Can't Take Photo!\");\n      console.log(\"getUserMedia Error:\", err);\n    };\n\n    navigator.mediaDevices\n              .getUserMedia({video: true})\n              .then(success)\n              .catch(error);\n  }\n\n  checkIdentity(img) {\n    console.log(\"POST to /identify\")\n    const success = () => {\n      const d = JSON.parse(req.response);\n      if (this.state.photoURL) URL.revokeObjectURL(this.state.photoURL)\n      this.setState({photoURL: URL.createObjectURL(img)})\n      if (d.length) {\n        const new_users = d.map(user => user.user)\n        console.log(\"Response:\", d);\n        console.log('New Users:', new_users);\n        this.setState({user: new_users, showRegistration: false});\n      }\n      else {\n        this.setState({user: \"Unknown User(s)\"})\n        console.log(\"Response\", d);\n      }\n    }\n    let form = new FormData();\n    form.append('image', img, 'user-image.jpeg');\n\n    let req = new XMLHttpRequest();\n    req.open(\"POST\", \"/identify\");\n    req.onload = success;\n    req.send(form);\n  }\n\n  registerUser(img) {\n    console.log(\"POST to /register\")\n    const success = () => {\n      console.log('Response:', req.responseText);\n      alert(req.responseText);\n    }\n\n    let form = new FormData();\n    form.append('user', this.state.user);\n    form.append('image', img, 'user-image.jpeg');\n\n    let req = new XMLHttpRequest();\n    req.open('POST', \"/register\");\n    req.onload = success;\n    req.send(form);\n  }\n\n  handleDeleteAllUsers() {\n    const success = () => {\n      console.log('Response:', req.responseText);\n      alert(req.responseText);\n    }\n\n    let req = new XMLHttpRequest();\n    req.open('GET', \"/delete\");\n    req.onload = success;\n    req.send();\n  }\n\n  render() {\n    const imgAlt = \"https://via.placeholder.com/500x400?text=Take+A+Picture!\"\n  \n    return (\n      <div className=\"App\">\n        <div id='photo-container'>\n          <h3 id=\"users\">Users In This Photo:<br/>{this.state.user}</h3>\n          <img id=\"photo\" src={this.state.photoURL || imgAlt} />\n        </div>\n        <NewUser user={this.state.user}\n                 userChange={this.handleUserChange}\n                 click={(e) => {\n                  e.preventDefault();\n                  this.handleTakePhoto(this.registerUser);\n                 }}\n        />\n        <Upload upload={this.handleBulkUpload} compare={this.checkIdentity}/>\n        <button className='button' onClick={() => this.handleTakePhoto(this.checkIdentity)}><i className=\"fas fa-camera\"></i></button>\n        <video id='camera-display' autoPlay playsInline>\n          Your browser does not support the media tag\n        </video>\n        <h1 id=\"title\" className=\"title\">Facial Recognition API Demo</h1>\n        <h2 id=\"subtitle\" className=\"title\">Powered by Python & ReactJS</h2>\n        <Description />\n        <button id=\"delete-db\" onClick={this.handleDeleteAllUsers}><strong>Erase User Facial Recognition Data</strong></button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}